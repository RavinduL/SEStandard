namespace RavinduL.SEStandard.Build.CodeGen
{
	using System.Collections.Generic;
	using System.Text;

	public static class CodeGenHelpers
	{
		/// <summary>
		/// The name of the folder within a project, into which files generated by the code generation tasks should be added.
		/// </summary>
		public const string CodeGenFolderName = "CodeGenOutput";

		/// <summary>
		/// Prettifies the specified string by capitalizing its first letter, and removing underscores and capitalizing letters that follow.
		/// </summary>
		public static string Prettify(string s)
		{
			var sb = new StringBuilder();
			var capitalize = true;

			foreach (var c in s)
			{
				if (c == '_')
				{
					capitalize = true;
				}
				else
				{
					sb.Append(capitalize ? c.ToString().ToUpper() : c.ToString());
					capitalize = false;
				}
			}

			return sb.ToString();
		}

		/// <summary>
		/// A list of language keywords that <see cref="EscapeName(string)"/> escapes.
		/// </summary>
		public static readonly HashSet<string> languageKeywords = new HashSet<string> { "abstract", "add", "as", "ascending", "async", "await", "base", "bool", "break", "by", "byte", "case", "catch", "char", "checked", "class", "const", "continue", "decimal", "default", "delegate", "descending", "do", "double", "dynamic", "else", "enum", "equals", "explicit", "extern", "false", "finally", "fixed", "float", "for", "foreach", "from", "get", "global", "goto", "group", "if", "implicit", "in", "int", "interface", "internal", "into", "is", "join", "let", "lock", "long", "namespace", "new", "null", "object", "on", "operator", "orderby", "out", "override", "params", "partial", "private", "protected", "public", "readonly", "ref", "remove", "return", "sbyte", "sealed", "select", "set", "short", "sizeof", "stackalloc", "static", "string", "struct", "switch", "this", "throw", "true", "try", "typeof", "uint", "ulong", "unchecked", "unsafe", "ushort", "using", "value", "var", "virtual", "void", "volatile", "where", "while", "yield", };

		/// <summary>
		/// Escapes the specified name prefixing it with a '@' character if it is present in <see cref="languageKeywords"/>.
		/// </summary>
		public static string EscapeName(string name)
		{
			return languageKeywords.Contains(name) ? $"@{name}" : name;
		}

		/// <summary>
		/// A <see cref="HashSet{T}"/> of non-nullable types, used for code generation.
		/// </summary>
		public static HashSet<string> NonNullableTypes = new HashSet<string> { "int", "bool", "DateTime", };
	}
}
